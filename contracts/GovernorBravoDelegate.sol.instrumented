/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
/// SPDX-License-Identifier: BSD-3-Clause
pragma solidity ^0.8.10;

import "./GovernorBravoInterfaces.sol";

/// #if_succeeds msg.sender == admin;
contract GovernorBravoDelegate is GovernorBravoDelegateStorageV2, GovernorBravoEvents {
    /// @notice The name of this contract
    string public constant name = "Compound Governor Bravo";
    /// @notice The minimum setable proposal threshold
    uint public constant MIN_PROPOSAL_THRESHOLD = 1000e18;
    /// @notice The maximum setable proposal threshold
    uint public constant MAX_PROPOSAL_THRESHOLD = 100000e18;
    /// @notice The minimum setable voting period
    uint public constant MIN_VOTING_PERIOD = 5760;
    /// @notice The max setable voting period
    uint public constant MAX_VOTING_PERIOD = 80640;
    /// @notice The min setable voting delay
    uint public constant MIN_VOTING_DELAY = 1;
    /// @notice The max setable voting delay
    uint public constant MAX_VOTING_DELAY = 40320;
    /// @notice The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed
    uint public constant quorumVotes = 400000e18;
    /// @notice The maximum number of actions that can be included in a proposal
    uint public constant proposalMaxOperations = 10;
    /// @notice The EIP-712 typehash for the contract's domain
    bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");
    /// @notice The EIP-712 typehash for the ballot struct used by the contract
    bytes32 public constant BALLOT_TYPEHASH = keccak256("Ballot(uint256 proposalId,uint8 support)");

    function initialize(address timelock_, address comp_, uint votingPeriod_, uint votingDelay_, uint proposalThreshold_) virtual public {
        _original_GovernorBravoDelegate_initialize(timelock_, comp_, votingPeriod_, votingDelay_, proposalThreshold_);
        unchecked {
            if (!(msg.sender == admin)) {
                emit __ScribbleUtilsLib__1545.AssertionFailed("002102:0068:000 0: ");
                assert(false);
            }
        }
    }

    function _original_GovernorBravoDelegate_initialize(address timelock_, address comp_, uint votingPeriod_, uint votingDelay_, uint proposalThreshold_) internal {
        require(address(timelock) == address(0), "GovernorBravo::initialize: can only initialize once");
        require(msg.sender == admin, "GovernorBravo::initialize: admin only");
        require(timelock_ != address(0), "GovernorBravo::initialize: invalid timelock address");
        require(comp_ != address(0), "GovernorBravo::initialize: invalid comp address");
        require((votingPeriod_ >= MIN_VOTING_PERIOD) && (votingPeriod_ <= MAX_VOTING_PERIOD), "GovernorBravo::initialize: invalid voting period");
        require((votingDelay_ >= MIN_VOTING_DELAY) && (votingDelay_ <= MAX_VOTING_DELAY), "GovernorBravo::initialize: invalid voting delay");
        require((proposalThreshold_ >= MIN_PROPOSAL_THRESHOLD) && (proposalThreshold_ <= MAX_PROPOSAL_THRESHOLD), "GovernorBravo::initialize: invalid proposal threshold");
        timelock = TimelockInterface(timelock_);
        comp = CompInterface(comp_);
        votingPeriod = votingPeriod_;
        votingDelay = votingDelay_;
        proposalThreshold = proposalThreshold_;
    }

    function propose(address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas, string memory description) public returns (uint RET_0) {
        RET_0 = _original_GovernorBravoDelegate_propose(targets, values, signatures, calldatas, description);
        unchecked {
            if (!(msg.sender == admin)) {
                emit __ScribbleUtilsLib__1545.AssertionFailed("003813:0068:000 0: ");
                assert(false);
            }
        }
    }

    function _original_GovernorBravoDelegate_propose(address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas, string memory description) internal returns (uint) {
        require(initialProposalId != 0, "GovernorBravo::propose: Governor Bravo not active");
        require((comp.getPriorVotes(msg.sender, sub256(block.number, 1)) > proposalThreshold) || isWhitelisted(msg.sender), "GovernorBravo::propose: proposer votes below proposal threshold");
        require(((targets.length == values.length) && (targets.length == signatures.length)) && (targets.length == calldatas.length), "GovernorBravo::propose: proposal function information arity mismatch");
        require(targets.length != 0, "GovernorBravo::propose: must provide actions");
        require(targets.length <= proposalMaxOperations, "GovernorBravo::propose: too many actions");
        uint latestProposalId = latestProposalIds[msg.sender];
        if (latestProposalId != 0) {
            ProposalState proposersLatestProposalState = state(latestProposalId);
            require(proposersLatestProposalState != ProposalState.Active, "GovernorBravo::propose: one live proposal per proposer, found an already active proposal");
            require(proposersLatestProposalState != ProposalState.Pending, "GovernorBravo::propose: one live proposal per proposer, found an already pending proposal");
        }
        uint startBlock = add256(block.number, votingDelay);
        uint endBlock = add256(startBlock, votingPeriod);
        proposalCount++;
        uint newProposalID = proposalCount;
        Proposal storage newProposal = proposals[newProposalID];
        require(newProposal.id == 0, "GovernorBravo::propose: ProposalID collsion");
        newProposal.id = newProposalID;
        newProposal.proposer = msg.sender;
        newProposal.eta = 0;
        newProposal.targets = targets;
        newProposal.values = values;
        newProposal.signatures = signatures;
        newProposal.calldatas = calldatas;
        newProposal.startBlock = startBlock;
        newProposal.endBlock = endBlock;
        newProposal.forVotes = 0;
        newProposal.againstVotes = 0;
        newProposal.abstainVotes = 0;
        newProposal.canceled = false;
        newProposal.executed = false;
        latestProposalIds[newProposal.proposer] = newProposal.id;
        emit ProposalCreated(newProposal.id, msg.sender, targets, values, signatures, calldatas, startBlock, endBlock, description);
        return newProposal.id;
    }

    function queue(uint proposalId) external {
        _original_GovernorBravoDelegate_queue(proposalId);
        unchecked {
            if (!(msg.sender == admin)) {
                emit __ScribbleUtilsLib__1545.AssertionFailed("006669:0068:000 0: ");
                assert(false);
            }
        }
    }

    function _original_GovernorBravoDelegate_queue(uint proposalId) internal {
        require(state(proposalId) == ProposalState.Succeeded, "GovernorBravo::queue: proposal can only be queued if it is succeeded");
        Proposal storage proposal = proposals[proposalId];
        uint eta = add256(block.timestamp, timelock.delay());
        for (uint i = 0; i < proposal.targets.length; i++) {
            queueOrRevertInternal(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], eta);
        }
        proposal.eta = eta;
        emit ProposalQueued(proposalId, eta);
    }

    function queueOrRevertInternal(address target, uint value, string memory signature, bytes memory data, uint eta) internal {
        require(!timelock.queuedTransactions(keccak256(abi.encode(target, value, signature, data, eta))), "GovernorBravo::queueOrRevertInternal: identical proposal action already queued at eta");
        timelock.queueTransaction(target, value, signature, data, eta);
    }

    function execute(uint proposalId) external payable {
        _original_GovernorBravoDelegate_execute(proposalId);
        unchecked {
            if (!(msg.sender == admin)) {
                emit __ScribbleUtilsLib__1545.AssertionFailed("008015:0068:000 0: ");
                assert(false);
            }
        }
    }

    function _original_GovernorBravoDelegate_execute(uint proposalId) internal {
        require(state(proposalId) == ProposalState.Queued, "GovernorBravo::execute: proposal can only be executed if it is queued");
        Proposal storage proposal = proposals[proposalId];
        proposal.executed = true;
        for (uint i = 0; i < proposal.targets.length; i++) {
            timelock.executeTransaction{value: proposal.values[i]}(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], proposal.eta);
        }
        emit ProposalExecuted(proposalId);
    }

    function cancel(uint proposalId) external {
        _original_GovernorBravoDelegate_cancel(proposalId);
        unchecked {
            if (!(msg.sender == admin)) {
                emit __ScribbleUtilsLib__1545.AssertionFailed("008931:0068:000 0: ");
                assert(false);
            }
        }
    }

    function _original_GovernorBravoDelegate_cancel(uint proposalId) internal {
        require(state(proposalId) != ProposalState.Executed, "GovernorBravo::cancel: cannot cancel executed proposal");
        Proposal storage proposal = proposals[proposalId];
        if (msg.sender != proposal.proposer) {
            if (isWhitelisted(proposal.proposer)) {
                require((comp.getPriorVotes(proposal.proposer, sub256(block.number, 1)) < proposalThreshold) && (msg.sender == whitelistGuardian), "GovernorBravo::cancel: whitelisted proposer");
            } else {
                require((comp.getPriorVotes(proposal.proposer, sub256(block.number, 1)) < proposalThreshold), "GovernorBravo::cancel: proposer above threshold");
            }
        }
        proposal.canceled = true;
        for (uint i = 0; i < proposal.targets.length; i++) {
            timelock.cancelTransaction(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], proposal.eta);
        }
        emit ProposalCanceled(proposalId);
    }

    ///  @notice Gets actions of a proposal
    ///  @param proposalId the id of the proposal
    ///  @return targets of the proposal actions
    ///  @return values of the proposal actions
    ///  @return signatures of the proposal actions
    ///  @return calldatas of the proposal actions
    function getActions(uint proposalId) external view returns (address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas) {
        Proposal storage p = proposals[proposalId];
        return (p.targets, p.values, p.signatures, p.calldatas);
    }

    ///  @notice Gets the receipt for a voter on a given proposal
    ///  @param proposalId the id of proposal
    ///  @param voter The address of the voter
    ///  @return The voting receipt
    function getReceipt(uint proposalId, address voter) external view returns (Receipt memory) {
        return proposals[proposalId].receipts[voter];
    }

    ///  @notice Gets the state of a proposal
    ///  @param proposalId The id of the proposal
    ///  @return Proposal state
    function state(uint proposalId) public view returns (ProposalState) {
        require((proposalCount >= proposalId) && (proposalId > initialProposalId), "GovernorBravo::state: invalid proposal id");
        Proposal storage proposal = proposals[proposalId];
        if (proposal.canceled) {
            return ProposalState.Canceled;
        } else if (block.number <= proposal.startBlock) {
            return ProposalState.Pending;
        } else if (block.number <= proposal.endBlock) {
            return ProposalState.Active;
        } else if ((proposal.forVotes <= proposal.againstVotes) || (proposal.forVotes < quorumVotes)) {
            return ProposalState.Defeated;
        } else if (proposal.eta == 0) {
            return ProposalState.Succeeded;
        } else if (proposal.executed) {
            return ProposalState.Executed;
        } else if (block.timestamp >= add256(proposal.eta, timelock.GRACE_PERIOD())) {
            return ProposalState.Expired;
        } else {
            return ProposalState.Queued;
        }
    }

    function castVote(uint proposalId, uint8 support) external {
        _original_GovernorBravoDelegate_castVote(proposalId, support);
        unchecked {
            if (!(msg.sender == admin)) {
                emit __ScribbleUtilsLib__1545.AssertionFailed("012454:0068:000 0: ");
                assert(false);
            }
        }
    }

    function _original_GovernorBravoDelegate_castVote(uint proposalId, uint8 support) internal {
        emit VoteCast(msg.sender, proposalId, support, castVoteInternal(msg.sender, proposalId, support), "");
    }

    function castVoteWithReason(uint proposalId, uint8 support, string calldata reason) external {
        _original_GovernorBravoDelegate_castVoteWithReason(proposalId, support, reason);
        unchecked {
            if (!(msg.sender == admin)) {
                emit __ScribbleUtilsLib__1545.AssertionFailed("013067:0068:000 0: ");
                assert(false);
            }
        }
    }

    function _original_GovernorBravoDelegate_castVoteWithReason(uint proposalId, uint8 support, string calldata reason) internal {
        emit VoteCast(msg.sender, proposalId, support, castVoteInternal(msg.sender, proposalId, support), reason);
    }

    function castVoteBySig(uint proposalId, uint8 support, uint8 v, bytes32 r, bytes32 s) external {
        _original_GovernorBravoDelegate_castVoteBySig(proposalId, support, v, r, s);
        unchecked {
            if (!(msg.sender == admin)) {
                emit __ScribbleUtilsLib__1545.AssertionFailed("013716:0068:000 0: ");
                assert(false);
            }
        }
    }

    function _original_GovernorBravoDelegate_castVoteBySig(uint proposalId, uint8 support, uint8 v, bytes32 r, bytes32 s) internal {
        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainIdInternal(), address(this)));
        bytes32 structHash = keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support));
        bytes32 digest = keccak256(abi.encodePacked("\u0019\u0001", domainSeparator, structHash));
        address signatory = ecrecover(digest, v, r, s);
        require(signatory != address(0), "GovernorBravo::castVoteBySig: invalid signature");
        emit VoteCast(signatory, proposalId, support, castVoteInternal(signatory, proposalId, support), "");
    }

    ///  @notice Internal function that caries out voting logic
    ///  @param voter The voter that is casting their vote
    ///  @param proposalId The id of the proposal to vote on
    ///  @param support The support value for the vote. 0=against, 1=for, 2=abstain
    ///  @return The number of votes cast
    function castVoteInternal(address voter, uint proposalId, uint8 support) internal returns (uint96) {
        require(state(proposalId) == ProposalState.Active, "GovernorBravo::castVoteInternal: voting is closed");
        require(support <= 2, "GovernorBravo::castVoteInternal: invalid vote type");
        Proposal storage proposal = proposals[proposalId];
        Receipt storage receipt = proposal.receipts[voter];
        require(receipt.hasVoted == false, "GovernorBravo::castVoteInternal: voter already voted");
        uint96 votes = comp.getPriorVotes(voter, proposal.startBlock);
        if (support == 0) {
            proposal.againstVotes = add256(proposal.againstVotes, votes);
        } else if (support == 1) {
            proposal.forVotes = add256(proposal.forVotes, votes);
        } else if (support == 2) {
            proposal.abstainVotes = add256(proposal.abstainVotes, votes);
        }
        receipt.hasVoted = true;
        receipt.support = support;
        receipt.votes = votes;
        return votes;
    }

    ///  @notice View function which returns if an account is whitelisted
    ///  @param account Account to check white list status of
    ///  @return If the account is whitelisted
    function isWhitelisted(address account) public view returns (bool) {
        return (whitelistAccountExpirations[account] > block.timestamp);
    }

    function _setVotingDelay(uint newVotingDelay) external {
        _original_GovernorBravoDelegate__setVotingDelay(newVotingDelay);
        unchecked {
            if (!(msg.sender == admin)) {
                emit __ScribbleUtilsLib__1545.AssertionFailed("016471:0068:000 1: ");
                assert(false);
            }
            if (!(msg.sender == admin)) {
                emit __ScribbleUtilsLib__1545.AssertionFailed("016644:0068:000 0: ");
                assert(false);
            }
        }
    }

    function _original_GovernorBravoDelegate__setVotingDelay(uint newVotingDelay) internal {
        require((newVotingDelay >= MIN_VOTING_DELAY) && (newVotingDelay <= MAX_VOTING_DELAY), "GovernorBravo::_setVotingDelay: invalid voting delay");
        uint oldVotingDelay = votingDelay;
        votingDelay = newVotingDelay;
        emit VotingDelaySet(oldVotingDelay, votingDelay);
    }

    function _setVotingPeriod(uint newVotingPeriod) external {
        _original_GovernorBravoDelegate__setVotingPeriod(newVotingPeriod);
        unchecked {
            if (!(msg.sender == admin)) {
                emit __ScribbleUtilsLib__1545.AssertionFailed("017382:0068:000 2: ");
                assert(false);
            }
            if (!(msg.sender == admin)) {
                emit __ScribbleUtilsLib__1545.AssertionFailed("017555:0068:000 0: ");
                assert(false);
            }
        }
    }

    function _original_GovernorBravoDelegate__setVotingPeriod(uint newVotingPeriod) internal {
        require(msg.sender == admin, "GovernorBravo::_setVotingPeriod: admin only");
        require((newVotingPeriod >= MIN_VOTING_PERIOD) && (newVotingPeriod <= MAX_VOTING_PERIOD), "GovernorBravo::_setVotingPeriod: invalid voting period");
        uint oldVotingPeriod = votingPeriod;
        votingPeriod = newVotingPeriod;
        emit VotingPeriodSet(oldVotingPeriod, votingPeriod);
    }

    function _setProposalThreshold(uint newProposalThreshold) external {
        _original_GovernorBravoDelegate__setProposalThreshold(newProposalThreshold);
        unchecked {
            if (!(msg.sender == admin)) {
                emit __ScribbleUtilsLib__1545.AssertionFailed("018413:0068:000 3: ");
                assert(false);
            }
            if (!(msg.sender == admin)) {
                emit __ScribbleUtilsLib__1545.AssertionFailed("018586:0068:000 0: ");
                assert(false);
            }
        }
    }

    function _original_GovernorBravoDelegate__setProposalThreshold(uint newProposalThreshold) internal {
        require(msg.sender == admin, "GovernorBravo::_setProposalThreshold: admin only");
        require((newProposalThreshold >= MIN_PROPOSAL_THRESHOLD) && (newProposalThreshold <= MAX_PROPOSAL_THRESHOLD), "GovernorBravo::_setProposalThreshold: invalid proposal threshold");
        uint oldProposalThreshold = proposalThreshold;
        proposalThreshold = newProposalThreshold;
        emit ProposalThresholdSet(oldProposalThreshold, proposalThreshold);
    }

    function _setWhitelistAccountExpiration(address account, uint expiration) external {
        _original_GovernorBravoDelegate__setWhitelistAccountExpiration(account, expiration);
        unchecked {
            if (!((msg.sender == admin) || (msg.sender == whitelistGuardian))) {
                emit __ScribbleUtilsLib__1545.AssertionFailed("019587:0068:000 4: ");
                assert(false);
            }
            if (!(msg.sender == admin)) {
                emit __ScribbleUtilsLib__1545.AssertionFailed("019760:0068:000 0: ");
                assert(false);
            }
        }
    }

    function _original_GovernorBravoDelegate__setWhitelistAccountExpiration(address account, uint expiration) internal {
        require((msg.sender == admin) || (msg.sender == whitelistGuardian), "GovernorBravo::_setWhitelistAccountExpiration: admin only");
        whitelistAccountExpirations[account] = expiration;
        emit WhitelistAccountExpirationSet(account, expiration);
    }

    function _setWhitelistGuardian(address account) external {
        _original_GovernorBravoDelegate__setWhitelistGuardian(account);
        unchecked {
            if (!(msg.sender == admin)) {
                emit __ScribbleUtilsLib__1545.AssertionFailed("020495:0068:000 5: ");
                assert(false);
            }
            if (!(msg.sender == admin)) {
                emit __ScribbleUtilsLib__1545.AssertionFailed("020668:0068:000 0: ");
                assert(false);
            }
        }
    }

    function _original_GovernorBravoDelegate__setWhitelistGuardian(address account) internal {
        require(msg.sender == admin, "GovernorBravo::_setWhitelistGuardian: admin only");
        address oldGuardian = whitelistGuardian;
        whitelistGuardian = account;
        emit WhitelistGuardianSet(oldGuardian, whitelistGuardian);
    }

    function _initiate(address governorAlpha) external {
        _original_GovernorBravoDelegate__initiate(governorAlpha);
        unchecked {
            if (!(msg.sender == admin)) {
                emit __ScribbleUtilsLib__1545.AssertionFailed("021346:0068:000 6: ");
                assert(false);
            }
            if (!(msg.sender == admin)) {
                emit __ScribbleUtilsLib__1545.AssertionFailed("021519:0068:000 0: ");
                assert(false);
            }
        }
    }

    function _original_GovernorBravoDelegate__initiate(address governorAlpha) internal {
        require(msg.sender == admin, "GovernorBravo::_initiate: admin only");
        require(initialProposalId == 0, "GovernorBravo::_initiate: can only initiate once");
        proposalCount = GovernorAlpha(governorAlpha).proposalCount();
        initialProposalId = proposalCount;
        timelock.acceptAdmin();
    }

    function _setPendingAdmin(address newPendingAdmin) external {
        _original_GovernorBravoDelegate__setPendingAdmin(newPendingAdmin);
        unchecked {
            if (!(msg.sender == admin)) {
                emit __ScribbleUtilsLib__1545.AssertionFailed("022282:0068:000 7: ");
                assert(false);
            }
            if (!(msg.sender == admin)) {
                emit __ScribbleUtilsLib__1545.AssertionFailed("022455:0068:000 0: ");
                assert(false);
            }
        }
    }

    function _original_GovernorBravoDelegate__setPendingAdmin(address newPendingAdmin) internal {
        require(msg.sender == admin, "GovernorBravo:_setPendingAdmin: admin only");
        address oldPendingAdmin = pendingAdmin;
        pendingAdmin = newPendingAdmin;
        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);
    }

    function _acceptAdmin() external {
        _original_GovernorBravoDelegate__acceptAdmin();
        unchecked {
            if (!((msg.sender == pendingAdmin) && (msg.sender != address(0)))) {
                emit __ScribbleUtilsLib__1545.AssertionFailed("023140:0068:000 8: ");
                assert(false);
            }
            if (!(msg.sender == admin)) {
                emit __ScribbleUtilsLib__1545.AssertionFailed("023313:0068:000 0: ");
                assert(false);
            }
        }
    }

    function _original_GovernorBravoDelegate__acceptAdmin() internal {
        require((msg.sender == pendingAdmin) && (msg.sender != address(0)), "GovernorBravo:_acceptAdmin: pending admin only");
        address oldAdmin = admin;
        address oldPendingAdmin = pendingAdmin;
        admin = pendingAdmin;
        pendingAdmin = address(0);
        emit NewAdmin(oldAdmin, admin);
        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);
    }

    function add256(uint256 a, uint256 b) internal pure returns (uint) {
        uint c = a + b;
        require(c >= a, "addition overflow");
        return c;
    }

    function sub256(uint256 a, uint256 b) internal pure returns (uint) {
        require(b <= a, "subtraction underflow");
        return a - b;
    }

    function getChainIdInternal() internal view returns (uint) {
        uint chainId;
        assembly {
            chainId := chainid()
        }
        return chainId;
    }
}

library __ScribbleUtilsLib__1545 {
    event AssertionFailed(string message);

    event AssertionFailedData(int eventId, bytes encodingData);

    function assertionFailed(string memory arg_0) internal {
        emit AssertionFailed(arg_0);
    }

    function assertionFailedData(int arg_0, bytes memory arg_1) internal {
        emit AssertionFailedData(arg_0, arg_1);
    }

    function isInContract() internal returns (bool res) {
        assembly {
            res := sload(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c)
        }
    }

    function setInContract(bool v) internal {
        assembly {
            sstore(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c, v)
        }
    }
}