name: SimpleDAO Fuzzing Campaign
description: Comprehensive fuzzing campaign for SimpleDAO contract to verify voting conditions and invariants
targets:
  - name: SimpleDAO
    source: ../contracts/SimpleDAO.sol
    compiler: solc
    compiler_version: 0.8.29
    solc_args:
      - --optimize
      - --optimize-runs=200
    fuzz_runs: 10000
    timeout: 3600
    properties:
      # Constructor properties
      - name: admin_set_correctly
        description: Admin must be set to the deployer
        property: "admin == msg.sender"
        function: constructor
      
      # createProposal properties
      - name: admin_only_create_proposal
        description: Only admin can create proposals
        property: "msg.sender == admin"
        function: createProposal
      - name: valid_voting_period
        description: Voting period must be between 0 and 7 days
        property: "_votingPeriod > 0 && _votingPeriod <= 7 days"
        function: createProposal
      - name: correct_start_time
        description: Proposal start time must be current block timestamp
        property: "proposals[proposalCount].startTime == block.timestamp"
        function: createProposal
      - name: correct_end_time
        description: Proposal end time must be start time plus voting period
        property: "proposals[proposalCount].endTime == block.timestamp + _votingPeriod"
        function: createProposal
      - name: proposal_count_incremented
        description: Proposal count must be incremented after creation
        property: "proposalCount == old(proposalCount) + 1"
        function: createProposal
      
      # vote properties
      - name: token_holder_vote
        description: Only token holders can vote
        property: "tokenBalances[msg.sender] > 0"
        function: vote
      - name: vote_during_period
        description: Can only vote during voting period
        property: "block.timestamp >= proposals[_proposalId].startTime && block.timestamp <= proposals[_proposalId].endTime"
        function: vote
      - name: no_double_voting
        description: Cannot vote twice on the same proposal
        property: "!proposals[_proposalId].hasVoted[msg.sender]"
        function: vote
      - name: vote_recorded
        description: Vote must be recorded after voting
        property: "proposals[_proposalId].hasVoted[msg.sender]"
        function: vote
      - name: vote_weighted_correctly
        description: Vote must be weighted by token balance
        property: "_support ? proposals[_proposalId].yesVotes == old(proposals[_proposalId].yesVotes) + tokenBalances[msg.sender] : proposals[_proposalId].noVotes == old(proposals[_proposalId].noVotes) + tokenBalances[msg.sender]"
        function: vote
      
      # finalize properties
      - name: finalize_after_period
        description: Can only finalize after voting period ends
        property: "block.timestamp > proposals[_proposalId].endTime"
        function: finalize
      - name: not_already_executed
        description: Cannot finalize an already executed proposal
        property: "!proposals[_proposalId].executed"
        function: finalize
      - name: executed_after_finalize
        description: Proposal must be marked as executed after finalization
        property: "proposals[_proposalId].executed"
        function: finalize
      
      # setTokenBalance properties
      - name: admin_set_balance
        description: Only admin can set token balances
        property: "msg.sender == admin"
        function: setTokenBalance
      - name: balance_set_correctly
        description: Token balance must be set to the specified amount
        property: "tokenBalances[_account] == _amount"
        function: setTokenBalance 